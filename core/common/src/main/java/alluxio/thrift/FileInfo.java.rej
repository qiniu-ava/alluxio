diff a/core/common/src/main/java/alluxio/thrift/FileInfo.java b/core/common/src/main/java/alluxio/thrift/FileInfo.java	(rejected hunks)
@@ -66,6 +66,8 @@ public class FileInfo implements org.apache.thrift.TBase<FileInfo, FileInfo._Fie
   private static final org.apache.thrift.protocol.TField UFS_FINGERPRINT_FIELD_DESC = new org.apache.thrift.protocol.TField("ufsFingerprint", org.apache.thrift.protocol.TType.STRING, (short)27);
   private static final org.apache.thrift.protocol.TField ACL_FIELD_DESC = new org.apache.thrift.protocol.TField("acl", org.apache.thrift.protocol.TType.STRUCT, (short)28);
   private static final org.apache.thrift.protocol.TField DEFAULT_ACL_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultAcl", org.apache.thrift.protocol.TType.STRUCT, (short)29);
+  private static final org.apache.thrift.protocol.TField REPLICATION_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("replicationMax", org.apache.thrift.protocol.TType.I32, (short)30);
+  private static final org.apache.thrift.protocol.TField REPLICATION_MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("replicationMin", org.apache.thrift.protocol.TType.I32, (short)31);
 
   private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
   static {
@@ -101,6 +103,8 @@ public class FileInfo implements org.apache.thrift.TBase<FileInfo, FileInfo._Fie
   private String ufsFingerprint; // required
   private TAcl acl; // required
   private TAcl defaultAcl; // required
+  private int replicationMax; // required
+  private int replicationMin; // required
 
   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
   public enum _Fields implements org.apache.thrift.TFieldIdEnum {
@@ -135,7 +139,9 @@ public class FileInfo implements org.apache.thrift.TBase<FileInfo, FileInfo._Fie
     IN_ALLUXIO_PERCENTAGE((short)26, "inAlluxioPercentage"),
     UFS_FINGERPRINT((short)27, "ufsFingerprint"),
     ACL((short)28, "acl"),
-    DEFAULT_ACL((short)29, "defaultAcl");
+    DEFAULT_ACL((short)29, "defaultAcl"),
+    REPLICATION_MAX((short)30, "replicationMax"),
+    REPLICATION_MIN((short)31, "replicationMin");
 
     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -206,6 +212,10 @@ public class FileInfo implements org.apache.thrift.TBase<FileInfo, FileInfo._Fie
           return ACL;
         case 29: // DEFAULT_ACL
           return DEFAULT_ACL;
+        case 30: // REPLICATION_MAX
+          return REPLICATION_MAX;
+        case 31: // REPLICATION_MIN
+          return REPLICATION_MIN;
         default:
           return null;
       }
@@ -324,6 +336,10 @@ public class FileInfo implements org.apache.thrift.TBase<FileInfo, FileInfo._Fie
         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAcl.class)));
     tmpMap.put(_Fields.DEFAULT_ACL, new org.apache.thrift.meta_data.FieldMetaData("defaultAcl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
         new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAcl.class)));
+    tmpMap.put(_Fields.REPLICATION_MAX, new org.apache.thrift.meta_data.FieldMetaData("replicationMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
+    tmpMap.put(_Fields.REPLICATION_MIN, new org.apache.thrift.meta_data.FieldMetaData("replicationMin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
+        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
     metaDataMap = Collections.unmodifiableMap(tmpMap);
     org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileInfo.class, metaDataMap);
   }
@@ -359,7 +375,9 @@ public class FileInfo implements org.apache.thrift.TBase<FileInfo, FileInfo._Fie
     int inAlluxioPercentage,
     String ufsFingerprint,
     TAcl acl,
-    TAcl defaultAcl)
+    TAcl defaultAcl,
+    int replicationMax,
+    int replicationMin)
   {
     this();
     this.fileId = fileId;
@@ -406,6 +424,10 @@ public class FileInfo implements org.apache.thrift.TBase<FileInfo, FileInfo._Fie
     this.ufsFingerprint = ufsFingerprint;
     this.acl = acl;
     this.defaultAcl = defaultAcl;
+    this.replicationMax = replicationMax;
+    setReplicationMaxIsSet(true);
+    this.replicationMin = replicationMin;
+    setReplicationMinIsSet(true);
   }
 
   /**
@@ -470,6 +492,8 @@ public class FileInfo implements org.apache.thrift.TBase<FileInfo, FileInfo._Fie
     if (other.isSetDefaultAcl()) {
       this.defaultAcl = new TAcl(other.defaultAcl);
     }
+    this.replicationMax = other.replicationMax;
+    this.replicationMin = other.replicationMin;
   }
 
   public FileInfo deepCopy() {
@@ -522,6 +546,10 @@ public class FileInfo implements org.apache.thrift.TBase<FileInfo, FileInfo._Fie
     this.ufsFingerprint = null;
     this.acl = null;
     this.defaultAcl = null;
+    setReplicationMaxIsSet(false);
+    this.replicationMax = 0;
+    setReplicationMinIsSet(false);
+    this.replicationMin = 0;
   }
 
   public long getFileId() {
@@ -1533,6 +1623,12 @@ public class FileInfo implements org.apache.thrift.TBase<FileInfo, FileInfo._Fie
     case DEFAULT_ACL:
       return getDefaultAcl();
 
+    case REPLICATION_MAX:
+      return getReplicationMax();
+
+    case REPLICATION_MIN:
+      return getReplicationMin();
+
     }
     throw new IllegalStateException();
   }
@@ -1600,6 +1696,10 @@ public class FileInfo implements org.apache.thrift.TBase<FileInfo, FileInfo._Fie
       return isSetAcl();
     case DEFAULT_ACL:
       return isSetDefaultAcl();
+    case REPLICATION_MAX:
+      return isSetReplicationMax();
+    case REPLICATION_MIN:
+      return isSetReplicationMin();
     }
     throw new IllegalStateException();
   }
@@ -2016,6 +2134,16 @@ public class FileInfo implements org.apache.thrift.TBase<FileInfo, FileInfo._Fie
     if (present_defaultAcl)
       list.add(defaultAcl);
 
+    boolean present_replicationMax = true;
+    list.add(present_replicationMax);
+    if (present_replicationMax)
+      list.add(replicationMax);
+
+    boolean present_replicationMin = true;
+    list.add(present_replicationMin);
+    if (present_replicationMin)
+      list.add(replicationMin);
+
     return list.hashCode();
   }
 
@@ -2486,6 +2634,14 @@ public class FileInfo implements org.apache.thrift.TBase<FileInfo, FileInfo._Fie
       sb.append(this.defaultAcl);
     }
     first = false;
+    if (!first) sb.append(", ");
+    sb.append("replicationMax:");
+    sb.append(this.replicationMax);
+    first = false;
+    if (!first) sb.append(", ");
+    sb.append("replicationMin:");
+    sb.append(this.replicationMin);
+    first = false;
     sb.append(")");
     return sb.toString();
   }
@@ -2921,6 +3093,12 @@ public class FileInfo implements org.apache.thrift.TBase<FileInfo, FileInfo._Fie
         struct.defaultAcl.write(oprot);
         oprot.writeFieldEnd();
       }
+      oprot.writeFieldBegin(REPLICATION_MAX_FIELD_DESC);
+      oprot.writeI32(struct.replicationMax);
+      oprot.writeFieldEnd();
+      oprot.writeFieldBegin(REPLICATION_MIN_FIELD_DESC);
+      oprot.writeI32(struct.replicationMin);
+      oprot.writeFieldEnd();
       oprot.writeFieldStop();
       oprot.writeStructEnd();
     }
@@ -3023,7 +3201,13 @@ public class FileInfo implements org.apache.thrift.TBase<FileInfo, FileInfo._Fie
       if (struct.isSetDefaultAcl()) {
         optionals.set(27);
       }
-      oprot.writeBitSet(optionals, 28);
+      if (struct.isSetReplicationMax()) {
+        optionals.set(28);
+      }
+      if (struct.isSetReplicationMin()) {
+        optionals.set(29);
+      }
+      oprot.writeBitSet(optionals, 30);
       if (struct.isSetFileId()) {
         oprot.writeI64(struct.fileId);
       }
@@ -3120,12 +3304,18 @@ public class FileInfo implements org.apache.thrift.TBase<FileInfo, FileInfo._Fie
       if (struct.isSetDefaultAcl()) {
         struct.defaultAcl.write(oprot);
       }
+      if (struct.isSetReplicationMax()) {
+        oprot.writeI32(struct.replicationMax);
+      }
+      if (struct.isSetReplicationMin()) {
+        oprot.writeI32(struct.replicationMin);
+      }
     }
 
     @Override
     public void read(org.apache.thrift.protocol.TProtocol prot, FileInfo struct) throws org.apache.thrift.TException {
       TTupleProtocol iprot = (TTupleProtocol) prot;
-      BitSet incoming = iprot.readBitSet(28);
+      BitSet incoming = iprot.readBitSet(30);
       if (incoming.get(0)) {
         struct.fileId = iprot.readI64();
         struct.setFileIdIsSet(true);
@@ -3259,6 +3449,14 @@ public class FileInfo implements org.apache.thrift.TBase<FileInfo, FileInfo._Fie
         struct.defaultAcl.read(iprot);
         struct.setDefaultAclIsSet(true);
       }
+      if (incoming.get(28)) {
+        struct.replicationMax = iprot.readI32();
+        struct.setReplicationMaxIsSet(true);
+      }
+      if (incoming.get(29)) {
+        struct.replicationMin = iprot.readI32();
+        struct.setReplicationMinIsSet(true);
+      }
     }
   }
 
