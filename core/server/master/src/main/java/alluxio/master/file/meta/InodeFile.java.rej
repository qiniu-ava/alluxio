diff a/core/server/master/src/main/java/alluxio/master/file/meta/InodeFile.java b/core/server/master/src/main/java/alluxio/master/file/meta/InodeFile.java	(rejected hunks)
@@ -88,6 +98,8 @@ public final class InodeFile extends Inode<InodeFile> implements InodeFileView {
     ret.setMode(getMode());
     ret.setPersistenceState(getPersistenceState().toString());
     ret.setMountPoint(false);
+    ret.setReplicationMax(getReplicationMax());
+    ret.setReplicationMin(getReplicationMin());
     ret.setUfsFingerprint(getUfsFingerprint());
     ret.setAcl(mAcl);
     return ret;
@@ -109,7 +121,8 @@ public final class InodeFile extends Inode<InodeFile> implements InodeFileView {
   }
 
   @Override
-  public void setDefaultACL(DefaultAccessControlList acl) throws UnsupportedOperationException {
+  public InodeFile setDefaultACL(DefaultAccessControlList acl)
+      throws UnsupportedOperationException {
     throw new UnsupportedOperationException("setDefaultACL: File does not have default ACL");
   }
 
@@ -142,6 +155,31 @@ public final class InodeFile extends Inode<InodeFile> implements InodeFileView {
     return mBlocks.get(blockIndex);
   }
 
+  @Override
+  public long getPersistJobId() {
+    return mPersistJobId;
+  }
+
+  @Override
+  public int getReplicationDurable() {
+    return mReplicationDurable;
+  }
+
+  @Override
+  public int getReplicationMax() {
+    return mReplicationMax;
+  }
+
+  @Override
+  public int getReplicationMin() {
+    return mReplicationMin;
+  }
+
+  @Override
+  public String getTempUfsPath() {
+    return mTempUfsPath;
+  }
+
   @Override
   public boolean isCacheable() {
     return mCacheable;
@@ -210,12 +248,69 @@ public final class InodeFile extends Inode<InodeFile> implements InodeFileView {
     return getThis();
   }
 
+  /**
+   * @param persistJobId the id of the job persisting this file
+   * @return the updated object
+   */
+  public InodeFile setPersistJobId(long persistJobId) {
+    mPersistJobId = persistJobId;
+    return getThis();
+  }
+
+  /**
+   * @param replicationDurable the durable number of block replication
+   * @return the updated object
+   */
+  public InodeFile setReplicationDurable(int replicationDurable) {
+    mReplicationDurable = replicationDurable;
+    return getThis();
+  }
+
+  /**
+   * @param replicationMax the maximum number of block replication
+   * @return the updated object
+   */
+  public InodeFile setReplicationMax(int replicationMax) {
+    mReplicationMax = replicationMax;
+    return getThis();
+  }
+
+  /**
+   * @param replicationMin the minimum number of block replication
+   * @return the updated object
+   */
+  public InodeFile setReplicationMin(int replicationMin) {
+    mReplicationMin = replicationMin;
+    return getThis();
+  }
+
+  /**
+   * @param tempUfsPath the temporary UFS path this file is persisted to
+   * @return the updated object
+   */
+  public InodeFile setTempUfsPath(String tempUfsPath) {
+    mTempUfsPath = tempUfsPath;
+    return getThis();
+  }
+
   /**
    * Updates this inode file's state from the given entry.
    *
    * @param entry the entry
    */
   public void updateFromEntry(UpdateInodeFileEntry entry) {
+    if (entry.hasPersistJobId()) {
+      setPersistJobId(entry.getPersistJobId());
+    }
+    if (entry.hasReplicationMax()) {
+      setReplicationMax(entry.getReplicationMax());
+    }
+    if (entry.hasReplicationMin()) {
+      setReplicationMin(entry.getReplicationMin());
+    }
+    if (entry.hasTempUfsPath()) {
+      setTempUfsPath(entry.getTempUfsPath());
+    }
     if (entry.hasBlockSizeBytes()) {
       setBlockSizeBytes(entry.getBlockSizeBytes());
     }
@@ -264,6 +364,11 @@ public final class InodeFile extends Inode<InodeFile> implements InodeFileView {
         .setParentId(entry.getParentId())
         .setPersistenceState(PersistenceState.valueOf(entry.getPersistenceState()))
         .setPinned(entry.getPinned())
+        .setPersistJobId(entry.getPersistJobId())
+        .setReplicationDurable(entry.getReplicationDurable())
+        .setReplicationMax(entry.getReplicationMax())
+        .setReplicationMin(entry.getReplicationMin())
+        .setTempUfsPath(entry.getTempUfsPath())
         .setTtl(entry.getTtl())
         .setTtlAction((ProtobufUtils.fromProtobuf(entry.getTtlAction())))
         .setUfsFingerprint(entry.hasUfsFingerprint() ? entry.getUfsFingerprint() :
@@ -294,10 +399,16 @@ public final class InodeFile extends Inode<InodeFile> implements InodeFileView {
    */
   public static InodeFile create(long blockContainerId, long parentId, String name,
       long creationTimeMs, CreateFileOptions options) {
+    Preconditions.checkArgument(
+        options.getReplicationMax() == Constants.REPLICATION_MAX_INFINITY
+        || options.getReplicationMax() >= options.getReplicationMin());
     return new InodeFile(blockContainerId)
         .setBlockSizeBytes(options.getBlockSizeBytes())
         .setCreationTimeMs(creationTimeMs)
         .setName(name)
+        .setReplicationDurable(options.getReplicationDurable())
+        .setReplicationMax(options.getReplicationMax())
+        .setReplicationMin(options.getReplicationMin())
         .setTtl(options.getTtl())
         .setTtlAction(options.getTtlAction())
         .setParentId(parentId)
@@ -308,7 +419,6 @@ public final class InodeFile extends Inode<InodeFile> implements InodeFileView {
         .setAcl(options.getAcl())
         .setPersistenceState(options.isPersisted() ? PersistenceState.PERSISTED
             : PersistenceState.NOT_PERSISTED);
-
   }
 
   @Override
